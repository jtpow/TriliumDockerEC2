

1: Launch an EC2 Instance 
   - ubuntu server or simliar Linux. 
   - `t3.micro` works
   - create a new Security Group with 22, 80, 8080(trilium), 443(optional)
   - storage can be default
  

2: Connect to the EC2 Instance
  - ssh to the instance   
  - update:  'sudo apt update && sudo apt upgrade -y'
 

3: Install Docker 
   -install Docker
     sudo apt install -y docker.io
     sudo systemctl start docker
     sudo systemctl enable docker
     sudo usermod -aG docker ubuntu  # Add ubuntu user to docker group, this requires the SSH to be disconnected and reconnected.
   
4: Install Docker Compose
     sudo apt install -y docker-compose


5: Create directory for Trilium
    mkdir ~/trilium && cd ~/trilium  #create directory
   
6: Create a Docker Compose File 
    nano docker-compose.yml #make sure it's in the directory created above
  
   add the following config:
```
   yaml
   version: '3'
   services:
     trilium:
       image: zadam/trilium:latest
       container_name: trilium
       ports:
         - "8080:8080"
       volumes:
         - ./trilium-data:/root/trilium-data
       restart: unless-stopped
   ```
   -  maps the container’s port 8080 to the host’s port 8080.  Persists Trilium data in the `trilium-data` directory. 'restart: unless-stopped' keeps docker runnig on machine reboot unless service is stopped

7: Start Trilium
  docker-compose up -d
  

8: Test access
   - should now be able to access Trilium in your browser at http://<ec2-public-ip>:8080`
   - setup admin account, no user, just PW


9: Setup ngnix for reverse proxy over 80 
  - install Nginx:    'sudo apt install -y nginx'
  - create an Nginx configuration file:   'sudo nano /etc/nginx/sites-available/trilium'
  - add the following, but sure and put your ip or domain name:
     ```
     nginx
     server {
         listen 80;
         server_name <domain OR ec2 public ip>;

         location / {
             proxy_pass http://localhost:8080;
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
         }
     }
     ```
   - **If you don't have an elastic IP, you'll have to update this when AWS issues a new IP
   - **You can you a domain name instead of IP if you purchased one. 

10: enable the config:   
     'sudo ln -s /etc/nginx/sites-available/trilium /etc/nginx/sites-enabled/'
     'sudo nginx -t  # Test configuration'
     'sudo systemctl restart nginx'
   

11: optional - requires domain name - set up SSL with Let’s Encrypt:
   - install Certbot:    'sudo apt install -y certbot python3-certbot-nginx'
   - grab an SSL cert:   'sudo certbot --nginx -d <your-domain>'
   - follow the prompts to complete setup.
   - make sure 443 is open on your sec group
   - trilium is now accessible at `https://<your-domain>`.



12: Setup Trilium back up to S3 (Data stored in the `trilium-data` directory.)
  -create an S3 Bucket, something like 'trilium-backup-<name>'
  -create an IAM Policy with this, update the bucket name:
```
json
     {
         "Version": "2012-10-17",
         "Statement": [
             {
                 "Effect": "Allow",
                 "Action": [
                     "s3:PutObject",
                     "s3:GetObject",
                     "s3:ListBucket"
                 ],
                 "Resource": [
                     "arn:aws:s3:::trilium-backup-<name>",
                     "arn:aws:s3:::trilium-backup-<name>/*"
                 ]
             }
         ]
     }
     ```
 -create an IAM Role and attach the above policy
 -attach this role to your EC2 instance: Instances > Select your instance > Actions > Security > Modify IAM role > Attach the role.

13: install AWS CLI:   'sudo apt install -y awscli'
    test access:  aws s3 ls s3://trilium-backup-<name>
   

14: Create back up script to move data file to S3
   - create a script to back up the `trilium-data` directory:    'nano ~/backup-trilium.sh'
   - add the following, make sure the s3 name is updated:
     ```
     #!/bin/bash
     TIMESTAMP=$(date +%Y%m%d_%H%M%S)
     BACKUP_FILE="trilium-backup-$TIMESTAMP.tar.gz"
     cd ~/trilium
     tar -zcf $BACKUP_FILE trilium-data
     aws s3 cp $BACKUP_FILE s3://trilium-backup-<your-name>/
     rm $BACKUP_FILE
     ```
   - make it executable:    'chmod +x ~/backup-trilium.sh
   - make sure you a back up file is available, run script manually to make sure back ups occur

15. Setup cron job to run it
  - edit the crontab:   'crontab -e'
  - add setup the schedule, make sure the directory location is right:
     ```
     0 0 * * * /home/ubuntu/backup-trilium.sh
     ```

16. You have successfully set up Trilum to run in docker on an EC2 with an nginix reverse proxy making it accessible from a browser anywhere with daily back ups of the data file to your S3 bucket. Groovy dudes and dudettes!


✧⁺⸜(･ ᗜ ･ )⸝⁺✧                                 _       
                                | |      
  ___ ___  _ __   __ _ _ __ __ _| |_ ___ 
 / __/ _ \| '_ \ / _` | '__/ _` | __/ __|
| (_| (_) | | | | (_| | | | (_| | |_\__ \
 \___\___/|_| |_|\__, |_|  \__,_|\__|___/
                  __/ |                  
                 |___/ 





